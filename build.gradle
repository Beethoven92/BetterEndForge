buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net/" }
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven"
        }
        maven {
            name = "parchment"
            url = "https://maven.parchmentmc.org"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath group: "org.spongepowered", name: "mixingradle", version: "0.7-SNAPSHOT"
    }
}
apply plugin: "net.minecraftforge.gradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "eclipse"
apply plugin: "maven-publish"
apply plugin: "org.spongepowered.mixin"

mixin {
    add sourceSets.main, "betterendforge.refmap.json"
}

version = "${minecraft_version}-${mod_version}"
group = "mod.beethoven92.betterendforge" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "betterendforge"


repositories {
     // location of a maven mirror for JEI files, as a fallback
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl/"
    }
    // location of the maven that hosts JEI files
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    // Patchouli
    maven { 
        url "https://maven.blamejared.com"
    }
}


java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "official", version: "1.18.1"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            // Needed to work with Patchouli in-dev
            properties "mixin.env.disableRefMap": "true"
            
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"
            
            arg "-mixin.config=betterendforge.mixins.json"

            mods {
                betterendforge {
                    source sourceSets.main
                }
            }
        }

        server {
            // Needed to work with Patchouli in-dev
            properties "mixin.env.disableRefMap": "true"
            
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            arg "-mixin.config=betterendforge.mixins.json"

            mods {
                betterendforge {
                    source sourceSets.main
                }
            }
        }

        data {
            // Needed to work with Patchouli in-dev
            properties "mixin.env.disableRefMap": "true"
            
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args "--mod", "betterendforge", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                betterendforge {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            srcDirs += 'src/generated/resources'
            exclude '.cache'
            exclude 'Thumbs.db'
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then "net.minecraft" it is assumed
    // that the dep is a ForgeGradle "patcher" dependency. And it"s patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.0.62:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.0.62")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-48:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-48")
    
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile "com.mod-buildcraft:buildcraft:6.0.8:dev"  // adds buildcraft to the dev env
    // compile "com.googlecode.efficient-java-matrix-library:ejml:0.24" // adds ejml to the dev env

    // The "provided" configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided "com.mod-buildcraft:buildcraft:6.0.8:dev"

    // These dependencies get remapped to your current MCP mappings
    // deobf "com.mod-buildcraft:buildcraft:6.0.8:dev"

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "BetterEnd Forge",
            "Specification-Vendor": "Beethoven92",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Beethoven92",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "betterendforge.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy("reobfJar")
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn("reobfJar")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
